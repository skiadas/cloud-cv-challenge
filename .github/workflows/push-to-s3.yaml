name: push-to-s3
on:
  push:
  workflow_dispatch:

permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo
jobs:
  check-out:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.changes.outputs.app }}
      site: ${{ steps.changes.outputs.site }}
      cf: ${{ steps.changes.outputs.cf }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check for site of CF changes
        id: changes
        run: |
          echo "::set-output name=app::$(git diff --name-only --diff-filter=ACMRT HEAD~ HEAD | grep '^app/' | xargs)"
          echo "::set-output name=site::$(git diff --name-only --diff-filter=ACMRT HEAD~ HEAD | grep '^site/' | xargs)"
          echo "::set-output name=cf::$(git diff --name-only --diff-filter=ACMRT HEAD~ HEAD | grep '^cloudFormation/' | xargs)"
  cf-lint:
    runs-on: ubuntu-latest
    needs: check-out
    if: ${{needs.check-out.outputs.cf}}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Setup Cloud Formation Linter with Latest Version
        uses: scottbrenner/cfn-lint-action@v2
      - name: Print the Cloud Formation Linter Version & run Linter.
        run: |
          cfn-lint --version
          cfn-lint -t ./cloudFormation/main.yaml
          cfn-lint -t ./cloudFormation/acm-certificate.yaml
          cfn-lint -t ./cloudFormation/buckets.yaml
          cfn-lint -t ./cloudFormation/cloudfront-site.yaml
  app-test:
    runs-on: ubuntu-latest
    needs: check-out
    # if: ${{needs.check-out.outputs.app}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: View poetry --help
        run: poetry --help
      - name: Install packages
        run: poetry install
      - name: Run tests
        run: >
          poetry run pytest
          --cov-config=.coveragerc
          --cov=app
          --cov-report html:cov_html
  upload:
    runs-on: ubuntu-latest
    needs:
      - check-out
      - cf-lint
      - app-test
    if: >
      ${{needs.check-out.outputs.app}} ||
      ${{needs.check-out.outputs.site}} ||
      ${{needs.check-out.outputs.cf}}
    env:
      ROLE: ${{ secrets.AWS_ROLE }}
      BUCKET: ${{ secrets.BUCKET_NAME }}
      SUBDOMAIN: ${{ secrets.SUBDOMAIN }}
      DOMAIN_NAME: ${{ secrets.DOMAIN }}
      ZONE_ID: ${{ secrets.HOSTED_ZONE_ID}}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.ROLE }}
          role-duration-seconds: 900
          aws-region: us-east-1
      - name: Prepare our CF stack templates
        if: >
          ${{needs.check-out.outputs.cf}} ||
          ${{needs.check-out.outputs.site}}
        run: >
          aws cloudformation package
          --template-file ./cloudFormation/main.yaml
          --s3-bucket skiadas-resume-templates
          --output-template-file packaged.template
      - name: Update our CF stack
        if: >
          ${{needs.check-out.outputs.cf}} ||
          ${{needs.check-out.outputs.site}}
        run: >
          aws cloudformation deploy
          --stack-name skiadas-resume-stack
          --s3-bucket skiadas-resume-templates
          --template-file packaged.template
          --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          --parameter-overrides SubDomain=$SUBDOMAIN DomainName=$DOMAIN_NAME
          HostedZoneId=$ZONE_ID BucketName=$BUCKET
      - name: Sync S3 bucket
        if: ${{needs.check-out.outputs.site}}
        run: aws s3 sync --delete ./site s3://$BUCKET
      - name: Invalidate the cache
        if: ${{needs.check-out.outputs.site}}
        run: >
          aws cloudfront create-invalidation
          --distribution-id $(aws cloudformation --output text --region us-east-1 list-exports --query "Exports[?Name=='skiadas-resume-distribution'].Value | [0]")
          --paths "/*"
